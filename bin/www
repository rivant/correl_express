#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app')
const debug = require('debug')('log-search:server')
const fs = require('fs')
const https = require('https')
const WebSocket = require('ws')
const logSearch = require('../routes/logSearch')

/**
 * Set options
 */
const port = normalizePort(process.env.PORT || '17702')
app.set('port', port)
const credentials = {
  key: fs.readFileSync('./.cert/private.key'),
  cert: fs.readFileSync('./.cert/certificate.pem')
}

/**
 * Create Servers.
 */
const server = https.createServer(credentials, app)
const wss = new WebSocket.Server({ server })

/**
 * Listeners
 */
server.on('error', onError)
server.on('listening', onListening)
wss.on('connection', (ws) => {
  ws.on('message', (data) => {
    logSearch(ws, JSON.parse(data))
  })
})
server.listen(port, '0.0.0.0')

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
